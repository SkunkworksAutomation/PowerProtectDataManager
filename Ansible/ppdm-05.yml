---
- name: "PowerProtect Data Manager MSSQL policy and rule creation demo"
  hosts: "{{ ansible_play_batch }}"
  collections:
    - community.general
  become: no
  gather_facts: false
 
  vars:
    rg1_uuid: "{{ lookup( 'password', '/dev/null length=32' ) | to_uuid }}"
    rg2_uuid: "{{ lookup( 'password', '/dev/null length=32' ) | to_uuid }}"
    rg3_uuid: "{{ lookup( 'password', '/dev/null length=32' ) | to_uuid }}"
  vars_files:
    - vars/credentials.yml

  tasks:
# WAIT FOR HTTPS RESPONSE FROM POWERPROTECT DATA MANAGER  
  - name: "( {{ppdm_host}} ): Wait for HTTPS connectivity"
    wait_for:
      host: "{{ppdm_host}}.{{ad_domain}}"
      port: 443
      state: started
      delay: 1
      sleep: 60
      timeout: 600
    register: waitforppdm

# AUTHENTICATE TO THE POWERPROTECT REST API & GRAB ACCESS TOKEN
  - name: "( {{ppdm_host}} ): Authenticate to PowerProtect DM REST API"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/login
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body:
        username: "{{ppdm_id}}"
        password: "{{ppdm_pwd}}"
      status_code: 200
    register: token
    
  - name:
    debug:
      var: token.json.access_token

# GET THE ATTACHED POWERPROTECT DD SYSTEM
  - name: "( {{ppdm_host}} ): Get the attached PowerProtect DD system"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/storage-systems?filter=type%20eq%20%22DATA_DOMAIN_SYSTEM%22%20and%20name%20eq%20%22{{ddve_host}}.{{ad_domain}}%22
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    register: storage

# CREATE WINDOWS CREDENTIALS
  - name: "( {{ppdm_host}} ): Create Windows credentials"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/credentials
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
          {
              "type": "OS",
              "username": "{{windows_id}}",
              "password": "{{windows_pwd}}",
              "name": "MSSQL",
              "token":""
          }
      status_code: [200,201,403]
    register: win_creds
    until: win_creds.status == 200 or win_creds.status == 201 or win_creds.status == 403
    retries: 90
    delay: 10

  - name:
    debug:
      var: win_creds.json

# CREATE THE VIRTUAL MACHINE POLICY
  - name: "( {{ppdm_host}} ): Create the protection policy -> POLICY-DB01"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/protection-policies
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
        {
            "name": "POLICY-DB01",
            "description": "Protect MSSQL Database Assets",
            "assetType": "MICROSOFT_SQL_DATABASE",
            "type": "ACTIVE",
            "encrypted": false,
            "enabled": true,
            "priority": 1,
            "dataConsistency": "APPLICATION_CONSISTENT",
            "passive": false,
            "forceFull": false,
            "details": null,
            "stages": [
                {
                    "id": "{{ lookup( 'password', '/dev/null length=32' ) | to_uuid }}",
                    "type": "PROTECTION",
                    "passive": false,
                     "attributes": {
                        "mssql": {
                            "troubleShootingOption": "debugEnabled=false",
                            "excludeSystemDatabase": false
                        }
                    },
                    "target": {
                        "storageSystemId": "{{ storage.json.content[0].id }}",
                        "dataTargetId": null,
                        "preferredInterface": "{{ storage.json.content[0].details.dataDomain.preferredInterfaces[0].networkAddress }}"
                    },
                    "slaId": null,
                    "sourceStageId": null,
                     "operations": [
                        {
                            "id": "{{ rg1_uuid }}",
                            "backupType": "FULL",
                            "schedule": {
                                "frequency": "DAILY",
                                "startTime": "2022-10-21T13:00:00.000Z",
                                "endTime": "2022-10-21T20:00",
                                "duration": "PT12H",
                                "interval": null
                            }
                        },
                        {
                            "id": "{{ rg2_uuid }}",
                            "backupType": "DIFFERENTIAL",
                            "schedule": {
                                "frequency": "HOURLY",
                                "startTime": "2022-10-21T13:00:00.000Z",
                                "endTime": "2022-10-21T20:00",
                                "duration": "PT12H",
                                "interval": 6
                            }
                        },
                        {
                            "id": "{{ rg3_uuid }}",
                            "backupType": "LOG",
                            "schedule": {
                                "frequency": "HOURLY",
                                "startTime": "2022-10-21T13:00:00.000Z",
                                "endTime": "2022-10-21T20:00",
                                "duration": "PT12H",
                                "interval": 1
                            }
                        }
                    ],
                    "retention": {
                        "unit": "DAY",
                        "storageSystemRetentionLock": false,
                        "interval": 7
                    },
                    "extendedRetentions": [
                        {
                          "selector": {
                              "operationId": "{{ rg1_uuid }}",
                              "backupType": "FULL"
                          },
                          "retention": {
                              "storageSystemRetentionLock": false,
                              "unit": "DAY",
                              "interval": 7
                          }
                      },
                      {
                          "selector": {
                              "operationId": "{{ rg2_uuid }}",
                              "backupType": "DIFFERENTIAL"
                          },
                          "retention": {
                              "storageSystemRetentionLock": false,
                              "unit": "DAY",
                              "interval": 7
                          }
                      },
                      {
                          "selector": {
                              "operationId": "{{ rg3_uuid }}",
                              "backupType": "LOG"
                          },
                          "retention": {
                              "storageSystemRetentionLock": false,
                              "unit": "DAY",
                              "interval": 7
                          }
                      }
                    ],
                    "options": {
                      "skipUnprotectableState": false,
                      "skipSimpleDatabase": false,
                      "promotionType": "ALL"
                  }
                }
            ],
            "filterIds": [],
             "credentials": {
                "id": "{{ win_creds.json.id }}",
                "name": "Select One",
                "type": "OS"
            },
            "slaId": ""
        }
      status_code: 201
    register: add_mssql_policy

# CREATE THE MSSQL DATABASE RULE
  - name: "( {{ppdm_host}} ): Create the protection rule -> RULE-DB01"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/protection-rules
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
        {
            "name": "RULE-DB01",
            "description": null,
            "action": "MOVE_TO_GROUP",
            "actionResult": "{{add_mssql_policy.json.id}}",
            "inventorySourceType": "MICROSOFT_SQL_DATABASE",
            "category": "COMPOUND",
            "rules": [
                {
                    "name": "sub1_RULE-DB01",
                    "description": null,
                    "action": null,
                    "actionResult": null,
                    "category": "PRIMITIVE",
                    "inventorySourceType": null,
                    "conditionConnector": "AND",
                    "logicalOperator": "AND",
                    "conditions": [
                        {
                            "assetAttributeName": "applicationSystemRef.applicationClusterDetail.type",
                            "operator": "EQUALS",
                            "assetAttributeValue": "",
                            "assetAttributeValues": [
                                "STANDALONE"
                            ]
                        },
                        {
                            "assetAttributeName": "name",
                            "operator": "BEGINS_WITH",
                            "assetAttributeValue": "",
                            "assetAttributeValues": [
                                "DATA_WAREHOUSE_S"
                            ]
                        }
                    ],
                    "priority": null
                }
            ],
            "conditionConnector": "OR",
            "logicalOperator": "OR",
            "conditions": null,
            "priority": -1,
            "tenant": {
                "id": "00000000-0000-4000-a000-000000000000"
            }
        }
      status_code: 201
    register: add_mssql_rule

# LOGOUT OF THE REST API
  - name: "( {{ppdm_host}}): Logout of the REST API"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/logout
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      status_code: 204
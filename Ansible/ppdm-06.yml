---
- name: "PowerProtect Data Manager file system policy and rule creation demo"
  hosts: "{{ ansible_play_batch }}"
  collections:
    - community.general
  become: no
  gather_facts: false
 
  vars:
    rg1_uuid: "{{ lookup( 'password', '/dev/null length=32' ) | to_uuid }}"
    rg2_uuid: "{{ lookup( 'password', '/dev/null length=32' ) | to_uuid }}"
    rg3_uuid: "{{ lookup( 'password', '/dev/null length=32' ) | to_uuid }}"
  vars_files:
    - vars/credentials.yml

  tasks:
# WAIT FOR HTTPS RESPONSE FROM POWERPROTECT DATA MANAGER  
  - name: "( {{ppdm_host}} ): Wait for HTTPS connectivity"
    wait_for:
      host: "{{ppdm_host}}.{{ad_domain}}"
      port: 443
      state: started
      delay: 1
      sleep: 60
      timeout: 600
    register: waitforppdm

# AUTHENTICATE TO THE POWERPROTECT REST API & GRAB ACCESS TOKEN
  - name: "( {{ppdm_host}} ): Authenticate to PowerProtect DM REST API"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/login
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body:
        username: "{{ppdm_id}}"
        password: "{{ppdm_pwd}}"
      status_code: 200
    register: token
    
  - name:
    debug:
      var: token.json.access_token

# GET THE ATTACHED POWERPROTECT DD SYSTEM
  - name: "( {{ppdm_host}} ): Get the attached PowerProtect DD system"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/storage-systems?filter=type%20eq%20%22DATA_DOMAIN_SYSTEM%22%20and%20name%20eq%20%22{{ddve_host}}.{{ad_domain}}%22
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: GET
      validate_certs: no
      return_content: yes
      body_format: json
    register: storage

# CREATE THE FILE SYSTEM POLICY
  - name: "( {{ppdm_host}} ): Create the protection policy -> POLICY-FS01"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/protection-policies
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
        {
            "name": "POLICY-FS01",
            "description": "",
            "assetType": "FILE_SYSTEM",
            "type": "ACTIVE",
            "encrypted": false,
            "enabled": true,
            "priority": 1,
            "dataConsistency": "CRASH_CONSISTENT",
            "passive": false,
            "forceFull": false,
            "details": null,
            "stages": [
                {
                    "id": "{{ lookup( 'password', '/dev/null length=32' ) | to_uuid }}",
                    "type": "PROTECTION",
                    "passive": false,
                    "attributes": {
                        "fileSystem": {
                            "troubleShootingOption": "debugEnabled=false"
                        }
                    },
                    "target": {
                        "storageSystemId": "{{ storage.json.content[0].id }}",
                        "dataTargetId": null,
                        "preferredInterface": "{{ storage.json.content[0].details.dataDomain.preferredInterfaces[1].networkAddress }}"
                    },
                    "slaId": null,
                    "sourceStageId": null,
                    "operations": [
                        {
                            "id": "{{ rg1_uuid }}",
                            "backupType": "SYNTHETIC_FULL",
                            "schedule": {
                                "frequency": "DAILY",
                                "startTime": "2022-10-22T01:00:00.000Z",
                                "endTime": "2022-10-22T06:00",
                                "duration": "PT10H",
                                "interval": null
                            }
                        }
                    ],
                    "retention": {
                        "unit": "DAY",
                        "storageSystemRetentionLock": false,
                        "interval": 7
                    },
                    "extendedRetentions": [
                        {
                            "selector": {
                                "operationId": "{{ rg1_uuid }}",
                                "backupType": "SYNTHETIC_FULL"
                            },
                            "retention": {
                                "storageSystemRetentionLock": false,
                                "unit": "DAY",
                                "interval": 7
                            }
                        }
                    ],
                    "options": {
                        "systemStateRecoveryOnly": false,
                        "ignoreMissingSystemStateFiles": true,
                        "excludeNonCriticalDynamicDisks": false,
                        "ignoreThirdPartyServices": false
                    }
                }
            ],
            "filterIds": [],
            "credentials": null,
            "slaId": ""
        }
      status_code: 201
    register: add_fs_policy

# CREATE THE FILE SYSTEM RULE
  - name: "( {{ppdm_host}} ): Create the protection rule -> RULE-FS01"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/protection-rules
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      body: |
        {
          "name": "RULE-FS01",
          "description": null,
          "action": "MOVE_TO_GROUP",
          "actionResult": "{{add_fs_policy.json.id}}",
          "inventorySourceType": "FILE_SYSTEM",
          "category": "COMPOUND",
          "rules": [
              {
                  "name": "sub1_RULE-FS01",
                  "description": null,
                  "action": null,
                  "actionResult": null,
                  "category": "PRIMITIVE",
                  "inventorySourceType": null,
                  "conditionConnector": "AND",
                  "logicalOperator": "AND",
                  "conditions": [
                      {
                          "assetAttributeName": "attributes.fileSystem.hostOS",
                          "operator": "EQUALS",
                          "assetAttributeValue": "",
                          "assetAttributeValues": [
                              "WINDOWS"
                          ]
                      }
                  ],
                  "priority": null
              }
          ],
          "conditionConnector": "OR",
          "logicalOperator": "OR",
          "conditions": null,
          "priority": -1,
          "tenant": {
              "id": "00000000-0000-4000-a000-000000000000"
          }
        }
      status_code: 201
    register: add_fs_rule

# LOGOUT OF THE REST API
  - name: "( {{ppdm_host}}): Logout of the REST API"
    uri:
      url: https://{{ppdm_host}}:8443/api/v2/logout
      headers:
        Authorization: "Bearer {{token.json.access_token}}"
        Content-Type: "application/json"
      method: POST
      validate_certs: no
      return_content: yes
      body_format: json
      status_code: 204